###NOTES!!!

#Console.log
        console is an object. Together with .log it is a method 

#Primitive types vs Reference types!

#Operator Precedence :: 

        NOT (!) has higher precedence than && and ||
        && has higher precedence than ||
        can alter this using parantheses ()

#Switch:

        break; is required after every case end,
        else all the cases following that case would run

#Ternary Operator:

        condition ? expIfTrue: expIfFalse

#Arrays:

        Push - Pop: Adds and removes from the end.

        Shift - Unshift: Removes and adds to the start.

        Concat: array1.concat(array2).

        Includes: looks for a value & returns true or false.

        IndexOf: just like str.indexOf.

        **use include if a value is present use indexOf to know where.

        join: takes the element and puts it in a single string.

        reverse: reverses the array.

        slice: Takes a portion of the array and spits it to a new array.

        splice*: Remove/Replaces/Adds a new element.

        sort: donot use it. F#in ridiculous

#Objects || Dictionary in Python

        Objects are collection of properties 
        Properties are key value pair
        Rather than accessing data using an index, use custom keys

#Nesting and Accessing Objects

#Comparing Arrays and Objects

#For..Loop - Great to use to loop from start point to stop point - single liner

        for(initialExpression; condition; incrementExpression) {}
        Nesting, Over Arrays

#While..Loop - great if the logic has some uncertainity

        while (condition) {
        // code block to be executed
        }

#Break

		break; out of the loop

#For..Of - Great to iterate over arrays --For Of wants and Iterable

		for(variable of iterable) { code block statements }

#For..In - Iterates automatically! --For In wants an object 
 
		for(variables in object)  code block statements }

#Functions - write reusable and modular code : Define and Run

		function funcName(){
			/write logic for the function
		}

		funcName()	
	#Arguments - none, single, multiple
	#Return - return value captures it in variable then pass them to another function 